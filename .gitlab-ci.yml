variables:
  CI_PROJECT_NAME: "opentelemetry-demo"
  BUILD_STABLE_REGISTRY: "486234852809.dkr.ecr.us-east-1.amazonaws.com"
  CI_IMAGE: registry.ddbuild.io/ci/opentelemetry-collector-contrib:ci-image-2
  RESTORE_CACHE_ATTEMPTS: 2
  BUILD_DD_REGISTRY: registry.ddbuild.io/ci/opentelemetry-demo
  BUILD_DEMO_REGISTRY: 172597598159.dkr.ecr.us-east-1.amazonaws.com/otel-demo
  BUILD_SANDBOX_REGISTRY: 601427279990.dkr.ecr.us-east-1.amazonaws.com/otel-demo
stages:
  - build-push
  - prod-deploy
  - staging-deploy

# BUILD AND PUSH IMAGES
.build-push-ci-image: &build-push-ci-image
  stage: build-push
  tags: ["runner:docker"]
  image: $CI_IMAGE
  script:
    - export DOCKER_BUILDKIT=1
    - TAG="v$CI_COMMIT_SHORT_SHA-$IMAGE_TAG_SUFFIX"
    - docker build --file $DOCKERFILE --tag $BUILD_SANDBOX_REGISTRY:$TAG --tag $BUILD_DEMO_REGISTRY:$TAG --label target=staging $CONTEXT
    - if [[ $CI_COMMIT_REF_NAME =~ -staging$ ]]; then
        docker push $BUILD_SANDBOX_REGISTRY:$TAG;
      fi
    - if [[ $CI_COMMIT_REF_NAME == "prod" ]]; then
        docker push $BUILD_DEMO_REGISTRY:$TAG;
      fi
build-push-ci-image-accountingservice:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/accountingservice/Dockerfile
    IMAGE_TAG_SUFFIX: accountingservice
    CONTEXT: .
build-push-ci-image-adservice:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/adservice/Dockerfile
    IMAGE_TAG_SUFFIX: adservice
    CONTEXT: .
build-push-ci-image-cartservice:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/cartservice/src/Dockerfile
    IMAGE_TAG_SUFFIX: cartservice
    CONTEXT: .
build-push-ci-image-checkoutservice:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/checkoutservice/Dockerfile
    IMAGE_TAG_SUFFIX: checkoutservice
    CONTEXT: .
build-push-ci-image-currencyservice:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/currencyservice/Dockerfile
    IMAGE_TAG_SUFFIX: currencyservice
    CONTEXT: src/currencyservice
build-push-ci-image-emailservice:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/emailservice/Dockerfile
    IMAGE_TAG_SUFFIX: emailservice
    CONTEXT: src/emailservice
build-push-ci-image-frauddetectionservice:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/frauddetectionservice/Dockerfile
    IMAGE_TAG_SUFFIX: frauddetectionservice
    CONTEXT: .
build-push-ci-image-frontend:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/frontend/Dockerfile
    IMAGE_TAG_SUFFIX: frontend
    CONTEXT: .
build-push-ci-image-frontendproxy:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/frontendproxy/Dockerfile
    IMAGE_TAG_SUFFIX: frontendproxy
    CONTEXT: .
build-push-ci-image-imageprovider:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/imageprovider/Dockerfile
    IMAGE_TAG_SUFFIX: imageprovider
    CONTEXT: .    
build-push-ci-image-loadgenerator:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/loadgenerator/Dockerfile
    IMAGE_TAG_SUFFIX: loadgenerator
    CONTEXT: .
build-push-ci-image-paymentservice:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/paymentservice/Dockerfile
    IMAGE_TAG_SUFFIX: paymentservice
    CONTEXT: .
build-push-ci-image-productcatalogservice:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/productcatalogservice/Dockerfile
    IMAGE_TAG_SUFFIX: productcatalogservice
    CONTEXT: .
build-push-ci-image-quoteservice:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/quoteservice/Dockerfile
    IMAGE_TAG_SUFFIX: quoteservice
    CONTEXT: .
build-push-ci-image-recommendationservice:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/recommendationservice/Dockerfile
    IMAGE_TAG_SUFFIX: recommendationservice
    CONTEXT: .
build-push-ci-image-shippingservice:
  stage: build-push
  tags: ["runner:docker"]
  image: $CI_IMAGE
  script:
    - TAG="v$CI_COMMIT_SHORT_SHA-$IMAGE_TAG_SUFFIX"
    - docker buildx build --file $DOCKERFILE --tag $BUILD_DD_REGISTRY:$TAG --tag $BUILD_DEMO_REGISTRY:$TAG --tag $BUILD_SANDBOX_REGISTRY:$TAG --label target=staging $CONTEXT
    - docker push $BUILD_DD_REGISTRY:$TAG
    - docker push $BUILD_DEMO_REGISTRY:$TAG
    - docker push $BUILD_SANDBOX_REGISTRY:$TAG
  variables:
    DOCKERFILE: src/shippingservice/Dockerfile
    IMAGE_TAG_SUFFIX: shippingservice
    CONTEXT: .
build-push-ci-image-kafka:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/kafka/Dockerfile
    IMAGE_TAG_SUFFIX: kafka
    CONTEXT: .
build-push-ci-image-orderproducer:
  !!merge <<: *build-push-ci-image
  variables:
    DOCKERFILE: src/orderproducerservice/Dockerfile
    IMAGE_TAG_SUFFIX: orderproducer
    CONTEXT: .

# PROD DEPLOY DEMO / AGENT 
.prod-deploy: &prod-deploy
  stage: prod-deploy
  tags: ["runner:docker", "size:large"]
  image: $CI_IMAGE
  rules:
    - if: '$CI_COMMIT_REF_NAME == "prod"'
  script:
    # # For debugging
    #- aws sts get-caller-identity
    - >-
      TEMP_AWS_ACCESS_KEY_ID=$(aws ssm get-parameter --region us-east-1 --name ci.opentelemetry-demo.eks_access_key --with-decryption --query Parameter.Value --out text)
    - >-
      TEMP_AWS_SECRET_ACCESS_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.opentelemetry-demo.eks_secret_access_key --with-decryption --query Parameter.Value --out text)
    - export AWS_ACCESS_KEY_ID=$TEMP_AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$TEMP_AWS_SECRET_ACCESS_KEY
    # # For debugging
    # - aws sts get-caller-identity
    - bash $SCRIPT $CLUSTER_NAME $CLUSTER_ARN $REGION $NAMESPACE

# Demo env:otel
prod-deploy-otel-demo-eks:
  !!merge <<: *prod-deploy
  variables:
    SCRIPT: ./ci/scripts/ci-deploy-demo.sh
    CLUSTER_NAME: prod-eks-otel-a-us-east-1
    CLUSTER_ARN: arn:aws:eks:us-east-1:172597598159:cluster/prod-eks-otel-a-us-east-1
    REGION: us-east-1
    NAMESPACE: otel
    ZOOKEEPER_DEPLOYMENT: deployment.yaml
    ORDERPRODUCER_DEPLOYMENT: deployment.yaml
    REGISTRY: $BUILD_DEMO_REGISTRY

# Demo env:otel-ingest
prod-deploy-otel-ingest-demo-eks:
  !!merge <<: *prod-deploy
  variables:
    SCRIPT: ./ci/scripts/ci-deploy-demo.sh
    CLUSTER_NAME: prod-eks-otel-ingest-a-usea-1
    CLUSTER_ARN: arn:aws:eks:us-east-1:172597598159:cluster/prod-eks-otel-ingest-a-usea-1
    REGION: us-east-1
    NAMESPACE: otel-ingest
    ZOOKEEPER_DEPLOYMENT: deployment.yaml
    ORDERPRODUCER_DEPLOYMENT: deployment.yaml
    REGISTRY: $BUILD_DEMO_REGISTRY

# Agent env:otel-ingest
prod-deploy-otel-ingest-agent-eks:
  !!merge <<: *prod-deploy
  variables:
    SCRIPT: ./ci/scripts/ci-deploy-agent.sh
    CLUSTER_NAME: prod-eks-otel-ingest-a-usea-1
    CLUSTER_ARN: arn:aws:eks:us-east-1:172597598159:cluster/prod-eks-otel-ingest-a-usea-1
    REGION: us-east-1
    NAMESPACE: otel-ingest
    VALUES: ./ci/datadog-agent-values-prod.yaml
    RELEASE_NAME: datadog-agent
    DD_VALUES: ./ci/datadog-agent-ddvalues-prod.yaml

# STAGING DEPLOY DEMO / AGENT 
.staging-deploy: &staging-deploy
  stage: staging-deploy
  tags: ["runner:docker", "size:large"]
  image: $CI_IMAGE
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /-staging$/'
  script:
    # # For debugging
    #- aws sts get-caller-identity
    - >-
      TEMP_AWS_ACCESS_KEY_ID=$(aws ssm get-parameter --region us-east-1 --name ci.opentelemetry-demo.sand-eks-deploy-api-key --with-decryption --query Parameter.Value --out text)
    - >-
      TEMP_AWS_SECRET_ACCESS_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.opentelemetry-demo.sand-eks-deploy-access-key --with-decryption --query Parameter.Value --out text)
    - export AWS_ACCESS_KEY_ID=$TEMP_AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$TEMP_AWS_SECRET_ACCESS_KEY
    # # For debugging
    # - aws sts get-caller-identity
    - bash $SCRIPT

# Demo env:otel-staging
staging-deploy-otel-demo-eks:
  !!merge <<: *staging-deploy
  variables:
    NAMESPACE: otel-staging
    VALUES:
    NODE_GROUP: ng-3
    SCRIPT: ./ci/scripts/ci-deploy-demo-staging.sh
    CLUSTER_NAME: dd-otel
    CLUSTER_ARN: "arn:aws:eks:us-east-1:601427279990:cluster/dd-otel"
    REGION: us-east-1
    ZOOKEEPER_DEPLOYMENT: deployment-staging.yaml
    ORDERPRODUCER_DEPLOYMENT: deployment-staging.yaml
    REGISTRY: $BUILD_SANDBOX_REGISTRY

# Demo env:otel-ingest-staging
staging-deploy-otel-ingest-demo-eks:
  !!merge <<: *staging-deploy
  variables:
    NAMESPACE: otel-ingest-staging
    VALUES: 
    NODE_GROUP: ng-4
    SCRIPT: ./ci/scripts/ci-deploy-demo-staging.sh
    CLUSTER_NAME: dd-otel
    CLUSTER_ARN: "arn:aws:eks:us-east-1:601427279990:cluster/dd-otel"
    REGION: us-east-1
    ZOOKEEPER_DEPLOYMENT: deployment-staging.yaml
    ORDERPRODUCER_DEPLOYMENT: deployment-staging.yaml
    REGISTRY: $BUILD_SANDBOX_REGISTRY

# Demo env:otel-gateway
staging-deploy-gateway-demo-eks:
  !!merge <<: *staging-deploy
  variables:
    NAMESPACE: otel-gateway
    VALUES: ./ci/values-gateway.yaml
    NODE_GROUP: ng-5
    SCRIPT: ./ci/scripts/ci-deploy-demo-staging.sh
    CLUSTER_NAME: dd-otel
    CLUSTER_ARN: "arn:aws:eks:us-east-1:601427279990:cluster/dd-otel"
    REGION: us-east-1
    ZOOKEEPER_DEPLOYMENT: deployment-staging.yaml
    ORDERPRODUCER_DEPLOYMENT: deployment-staging.yaml
    REGISTRY: $BUILD_SANDBOX_REGISTRY

# Demo env:otel-ds-gateway
staging-deploy-ds-gateway-demo-eks:
  !!merge <<: *staging-deploy
  variables:
    NAMESPACE: otel-ds-gateway
    VALUES:
    NODE_GROUP: ng-6
    SCRIPT: ./ci/scripts/ci-deploy-demo-staging.sh
    CLUSTER_NAME: dd-otel
    CLUSTER_ARN: "arn:aws:eks:us-east-1:601427279990:cluster/dd-otel"
    REGION: us-east-1
    ZOOKEEPER_DEPLOYMENT: deployment-staging.yaml
    ORDERPRODUCER_DEPLOYMENT: deployment-staging.yaml
    REGISTRY: $BUILD_SANDBOX_REGISTRY

# Demo env:dd-ingest-staging
staging-deploy-dd-ingest-demo-eks:
  !!merge <<: *staging-deploy
  variables:
    NAMESPACE: dd-ingest-staging
    VALUES: 
    NODE_GROUP: ng-7
    SCRIPT: ./ci/scripts/ci-deploy-demo-staging.sh
    CLUSTER_NAME: dd-otel
    CLUSTER_ARN: "arn:aws:eks:us-east-1:601427279990:cluster/dd-otel"
    REGION: us-east-1
    ZOOKEEPER_DEPLOYMENT: deployment-staging.yaml
    ORDERPRODUCER_DEPLOYMENT: deployment-staging.yaml
    REGISTRY: $BUILD_SANDBOX_REGISTRY

# Agent env:otel-ingest-staging
staging-deploy-otel-ingest-agent-eks:
  !!merge <<: *staging-deploy
  variables:
    NAMESPACE: otel-ingest-staging
    SCRIPT: ./ci/scripts/ci-deploy-agent.sh
    CLUSTER_NAME: dd-otel
    CLUSTER_ARN: "arn:aws:eks:us-east-1:601427279990:cluster/dd-otel"
    REGION: us-east-1
    VALUES: ./ci/datadog-agent-values-staging.yaml
    DD_VALUES: ./ci/datadog-agent-ddvalues-staging.yaml
    RELEASE_NAME: datadog-agent
# Agent env:dd-ingest-staging
staging-deploy-dd-ingest-agent-eks:
  !!merge <<: *staging-deploy
  variables:
    NAMESPACE: dd-ingest-staging
    SCRIPT: ./ci/scripts/ci-deploy-agent.sh
    CLUSTER_NAME: dd-otel
    CLUSTER_ARN: "arn:aws:eks:us-east-1:601427279990:cluster/dd-otel"
    REGION: us-east-1
    VALUES: ./ci/datadog-agent-values-dd-staging.yaml
    DD_VALUES: ./ci/datadog-agent-values-dd.yaml
    RELEASE_NAME: datadog-agent-dd
